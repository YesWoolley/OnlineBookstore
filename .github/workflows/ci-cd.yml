name: CI/CD Pipeline - Online Bookstore

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  AZURE_WEBAPP_NAME: onlinebookstore
  AZURE_WEBAPP_PACKAGE_PATH: './EbooksPlatfor.Server/bin/Release/net9.0/publish/'

jobs:
  # ===== BUILD AND TEST =====
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: |
        dotnet restore EbooksPlatfor.Server/OnlineBookstore.csproj
        dotnet restore EbooksPlatfor.Server.Tests/OnlineBookstore.Server.Tests.csproj
        
    - name: Build application
      run: |
        dotnet build EbooksPlatfor.Server/OnlineBookstore.csproj --configuration Release --no-restore
        dotnet build EbooksPlatfor.Server.Tests/OnlineBookstore.Server.Tests.csproj --configuration Release --no-restore
        
    - name: Run unit tests
      run: |
        dotnet test EbooksPlatfor.Server.Tests/OnlineBookstore.Server.Tests.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage/
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          EbooksPlatfor.Server.Tests/TestResults/
          coverage/
          
    - name: Publish application
      run: |
        dotnet publish EbooksPlatfor.Server/OnlineBookstore.csproj --configuration Release --output ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} --no-build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  # ===== DEPLOY TO AZURE =====
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        
    - name: Health check
      run: |
        # Wait for deployment to complete
        sleep 30
        # Test if the application is responding
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/ || exit 1

  # ===== SECURITY SCAN =====
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        # Add security scanning tools here
        echo "Security scan completed"
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: ./security-report/

  # ===== NOTIFICATIONS =====
  notify:
    runs-on: ubuntu-latest
    needs: [deploy, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic (Slack, Teams, Email, etc.)
        
    - name: Notify on failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add notification logic for failures 